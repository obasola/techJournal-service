/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.techjournal.domain.ReleaseNote;
import com.kumasi.techjournal.domain.jpa.ReleaseNoteEntity;
import java.util.Date;
import java.util.List;
import com.kumasi.techjournal.business.service.ReleaseNoteService;
import com.kumasi.techjournal.business.service.mapping.ReleaseNoteServiceMapper;
import com.kumasi.techjournal.persistence.PersistenceServiceProvider;
import com.kumasi.techjournal.persistence.services.ReleaseNotePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ReleaseNoteService
 */
@Component
public class ReleaseNoteServiceImpl implements ReleaseNoteService {

	private ReleaseNotePersistence releaseNotePersistence;

	@Resource
	private ReleaseNoteServiceMapper releaseNoteServiceMapper;
	
	public ReleaseNoteServiceImpl() {
		releaseNotePersistence = PersistenceServiceProvider.getService(ReleaseNotePersistence.class);
	}
		
	@Override
	public ReleaseNote findById(Integer id) {
		ReleaseNoteEntity entity = releaseNotePersistence.load(id);
		return releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(entity);
	}

	@Override
	public List<ReleaseNote> findAll() {
		List<ReleaseNoteEntity> entities = releaseNotePersistence.loadAll();
		List<ReleaseNote> beans = new ArrayList<ReleaseNote>();
		for(ReleaseNoteEntity entity : entities) {
			beans.add(releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(entity));
		}
		return beans;
	}

	@Override
	public ReleaseNote save(ReleaseNote releaseNote) {
		return update(releaseNote) ;
	}

	@Override
	public ReleaseNote create(ReleaseNote releaseNote) {
		if(releaseNote.getId() != null && releaseNotePersistence.load(releaseNote.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ReleaseNoteEntity releaseNoteEntity = new ReleaseNoteEntity();
		releaseNoteServiceMapper.mapReleaseNoteToReleaseNoteEntity(releaseNote, releaseNoteEntity);
		ReleaseNoteEntity releaseNoteEntitySaved = releaseNotePersistence.save(releaseNoteEntity);
		return releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntitySaved);
	}

	@Override
	public ReleaseNote update(ReleaseNote releaseNote) {
		ReleaseNoteEntity releaseNoteEntity = releaseNotePersistence.load(releaseNote.getId());
		releaseNoteServiceMapper.mapReleaseNoteToReleaseNoteEntity(releaseNote, releaseNoteEntity);
		ReleaseNoteEntity releaseNoteEntitySaved = releaseNotePersistence.save(releaseNoteEntity);
		return releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		releaseNotePersistence.delete(id);
	}

	public ReleaseNotePersistence getReleaseNotePersistence() {
		return releaseNotePersistence;
	}

	public void setReleaseNotePersistence(ReleaseNotePersistence releaseNotePersistence) {
		this.releaseNotePersistence = releaseNotePersistence;
	}

	public ReleaseNoteServiceMapper getReleaseNoteServiceMapper() {
		return releaseNoteServiceMapper;
	}

	public void setReleaseNoteServiceMapper(ReleaseNoteServiceMapper releaseNoteServiceMapper) {
		this.releaseNoteServiceMapper = releaseNoteServiceMapper;
	}

}
