/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.techjournal.domain.BatchJob;
import com.kumasi.techjournal.domain.jpa.BatchJobEntity;
import java.util.Date;
import com.kumasi.techjournal.business.service.BatchJobService;
import com.kumasi.techjournal.business.service.mapping.BatchJobServiceMapper;
import com.kumasi.techjournal.persistence.PersistenceServiceProvider;
import com.kumasi.techjournal.persistence.services.BatchJobPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of BatchJobService
 */
@Component
public class BatchJobServiceImpl implements BatchJobService {

	private BatchJobPersistence batchJobPersistence;

	@Resource
	private BatchJobServiceMapper batchJobServiceMapper;
	
	public BatchJobServiceImpl() {
		batchJobPersistence = PersistenceServiceProvider.getService(BatchJobPersistence.class);
	}
		
	@Override
	public BatchJob findById(Integer id) {
		BatchJobEntity entity = batchJobPersistence.load(id);
		return batchJobServiceMapper.mapBatchJobEntityToBatchJob(entity);
	}

	@Override
	public List<BatchJob> findAll() {
		List<BatchJobEntity> entities = batchJobPersistence.loadAll();
		List<BatchJob> beans = new ArrayList<BatchJob>();
		for(BatchJobEntity entity : entities) {
			beans.add(batchJobServiceMapper.mapBatchJobEntityToBatchJob(entity));
		}
		return beans;
	}

	@Override
	public BatchJob save(BatchJob batchJob) {
		return update(batchJob) ;
	}

	@Override
	public BatchJob create(BatchJob batchJob) {
		if(batchJob.getId() != null && batchJobPersistence.load(batchJob.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		BatchJobEntity batchJobEntity = new BatchJobEntity();
		batchJobServiceMapper.mapBatchJobToBatchJobEntity(batchJob, batchJobEntity);
		BatchJobEntity batchJobEntitySaved = batchJobPersistence.save(batchJobEntity);
		return batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntitySaved);
	}

	@Override
	public BatchJob update(BatchJob batchJob) {
		BatchJobEntity batchJobEntity = batchJobPersistence.load(batchJob.getId());
		batchJobServiceMapper.mapBatchJobToBatchJobEntity(batchJob, batchJobEntity);
		BatchJobEntity batchJobEntitySaved = batchJobPersistence.save(batchJobEntity);
		return batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		batchJobPersistence.delete(id);
	}

	public BatchJobPersistence getBatchJobPersistence() {
		return batchJobPersistence;
	}

	public void setBatchJobPersistence(BatchJobPersistence batchJobPersistence) {
		this.batchJobPersistence = batchJobPersistence;
	}

	public BatchJobServiceMapper getBatchJobServiceMapper() {
		return batchJobServiceMapper;
	}

	public void setBatchJobServiceMapper(BatchJobServiceMapper batchJobServiceMapper) {
		this.batchJobServiceMapper = batchJobServiceMapper;
	}

}
