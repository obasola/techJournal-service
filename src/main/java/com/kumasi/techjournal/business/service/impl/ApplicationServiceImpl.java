/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.techjournal.domain.Application;
import com.kumasi.techjournal.domain.jpa.ApplicationEntity;
import java.util.List;
import com.kumasi.techjournal.business.service.ApplicationService;
import com.kumasi.techjournal.business.service.mapping.ApplicationServiceMapper;
import com.kumasi.techjournal.persistence.PersistenceServiceProvider;
import com.kumasi.techjournal.persistence.services.ApplicationPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ApplicationService
 */
@Component
public class ApplicationServiceImpl implements ApplicationService {

	private ApplicationPersistence applicationPersistence;

	@Resource
	private ApplicationServiceMapper applicationServiceMapper;
	
	public ApplicationServiceImpl() {
		applicationPersistence = PersistenceServiceProvider.getService(ApplicationPersistence.class);
	}
		
	@Override
	public Application findById(Integer id) {
		ApplicationEntity entity = applicationPersistence.load(id);
		return applicationServiceMapper.mapApplicationEntityToApplication(entity);
	}

	@Override
	public List<Application> findAll() {
		List<ApplicationEntity> entities = applicationPersistence.loadAll();
		List<Application> beans = new ArrayList<Application>();
		for(ApplicationEntity entity : entities) {
			beans.add(applicationServiceMapper.mapApplicationEntityToApplication(entity));
		}
		return beans;
	}

	@Override
	public Application save(Application application) {
		return update(application) ;
	}

	@Override
	public Application create(Application application) {
		if(application.getId() != null && applicationPersistence.load(application.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ApplicationEntity applicationEntity = new ApplicationEntity();
		applicationServiceMapper.mapApplicationToApplicationEntity(application, applicationEntity);
		ApplicationEntity applicationEntitySaved = applicationPersistence.save(applicationEntity);
		return applicationServiceMapper.mapApplicationEntityToApplication(applicationEntitySaved);
	}

	@Override
	public Application update(Application application) {
		ApplicationEntity applicationEntity = applicationPersistence.load(application.getId());
		applicationServiceMapper.mapApplicationToApplicationEntity(application, applicationEntity);
		ApplicationEntity applicationEntitySaved = applicationPersistence.save(applicationEntity);
		return applicationServiceMapper.mapApplicationEntityToApplication(applicationEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		applicationPersistence.delete(id);
	}

	public ApplicationPersistence getApplicationPersistence() {
		return applicationPersistence;
	}

	public void setApplicationPersistence(ApplicationPersistence applicationPersistence) {
		this.applicationPersistence = applicationPersistence;
	}

	public ApplicationServiceMapper getApplicationServiceMapper() {
		return applicationServiceMapper;
	}

	public void setApplicationServiceMapper(ApplicationServiceMapper applicationServiceMapper) {
		this.applicationServiceMapper = applicationServiceMapper;
	}

}
