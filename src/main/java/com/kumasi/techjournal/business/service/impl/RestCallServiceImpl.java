/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.techjournal.domain.RestCall;
import com.kumasi.techjournal.domain.jpa.RestCallEntity;
import java.util.Date;
import com.kumasi.techjournal.business.service.RestCallService;
import com.kumasi.techjournal.business.service.mapping.RestCallServiceMapper;
import com.kumasi.techjournal.persistence.PersistenceServiceProvider;
import com.kumasi.techjournal.persistence.services.RestCallPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of RestCallService
 */
@Component
public class RestCallServiceImpl implements RestCallService {

	private RestCallPersistence restCallPersistence;

	@Resource
	private RestCallServiceMapper restCallServiceMapper;
	
	public RestCallServiceImpl() {
		restCallPersistence = PersistenceServiceProvider.getService(RestCallPersistence.class);
	}
		
	@Override
	public RestCall findById(Integer id) {
		RestCallEntity entity = restCallPersistence.load(id);
		return restCallServiceMapper.mapRestCallEntityToRestCall(entity);
	}

	@Override
	public List<RestCall> findAll() {
		List<RestCallEntity> entities = restCallPersistence.loadAll();
		List<RestCall> beans = new ArrayList<RestCall>();
		for(RestCallEntity entity : entities) {
			beans.add(restCallServiceMapper.mapRestCallEntityToRestCall(entity));
		}
		return beans;
	}

	@Override
	public RestCall save(RestCall restCall) {
		return update(restCall) ;
	}

	@Override
	public RestCall create(RestCall restCall) {
		if(restCall.getId() != null && restCallPersistence.load(restCall.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		RestCallEntity restCallEntity = new RestCallEntity();
		restCallServiceMapper.mapRestCallToRestCallEntity(restCall, restCallEntity);
		RestCallEntity restCallEntitySaved = restCallPersistence.save(restCallEntity);
		return restCallServiceMapper.mapRestCallEntityToRestCall(restCallEntitySaved);
	}

	@Override
	public RestCall update(RestCall restCall) {
		RestCallEntity restCallEntity = restCallPersistence.load(restCall.getId());
		restCallServiceMapper.mapRestCallToRestCallEntity(restCall, restCallEntity);
		RestCallEntity restCallEntitySaved = restCallPersistence.save(restCallEntity);
		return restCallServiceMapper.mapRestCallEntityToRestCall(restCallEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		restCallPersistence.delete(id);
	}

	public RestCallPersistence getRestCallPersistence() {
		return restCallPersistence;
	}

	public void setRestCallPersistence(RestCallPersistence restCallPersistence) {
		this.restCallPersistence = restCallPersistence;
	}

	public RestCallServiceMapper getRestCallServiceMapper() {
		return restCallServiceMapper;
	}

	public void setRestCallServiceMapper(RestCallServiceMapper restCallServiceMapper) {
		this.restCallServiceMapper = restCallServiceMapper;
	}

}
