/*
 * Created on 2 Jul 2016 ( Time 10:09:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.kumasi.techjournal.domain.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "release_note"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="release_note", catalog="techJournal" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="ReleaseNoteEntity.countAll", query="SELECT COUNT(x) FROM ReleaseNoteEntity x" )
} )
public class ReleaseNoteEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="ticket_number", length=15)
    private String     ticketNumber ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date_placed")
    private Date       datePlaced   ;

    @Column(name="comment")
    private String     comment      ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date_modified")
    private Date       dateModified ;

	// "techNoteId" (column "tech_note_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="tech_note_id", referencedColumnName="id")
    private TechNoteEntity techNote    ;

    @OneToMany(mappedBy="releaseNote", targetEntity=SqlScriptEntity.class)
    private List<SqlScriptEntity> listOfSqlScript;

    @OneToMany(mappedBy="releaseNote", targetEntity=RestCallEntity.class)
    private List<RestCallEntity> listOfRestCall;

    @OneToMany(mappedBy="releaseNote", targetEntity=BatchJobEntity.class)
    private List<BatchJobEntity> listOfBatchJob;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ReleaseNoteEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : ticket_number ( VARCHAR ) 
    public void setTicketNumber( String ticketNumber ) {
        this.ticketNumber = ticketNumber;
    }
    public String getTicketNumber() {
        return this.ticketNumber;
    }

    //--- DATABASE MAPPING : date_placed ( DATETIME ) 
    public void setDatePlaced( Date datePlaced ) {
        this.datePlaced = datePlaced;
    }
    public Date getDatePlaced() {
        return this.datePlaced;
    }

    //--- DATABASE MAPPING : comment ( MEDIUMTEXT ) 
    public void setComment( String comment ) {
        this.comment = comment;
    }
    public String getComment() {
        return this.comment;
    }

    //--- DATABASE MAPPING : date_modified ( DATETIME ) 
    public void setDateModified( Date dateModified ) {
        this.dateModified = dateModified;
    }
    public Date getDateModified() {
        return this.dateModified;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setTechNote( TechNoteEntity techNote ) {
        this.techNote = techNote;
    }
    public TechNoteEntity getTechNote() {
        return this.techNote;
    }

    public void setListOfSqlScript( List<SqlScriptEntity> listOfSqlScript ) {
        this.listOfSqlScript = listOfSqlScript;
    }
    public List<SqlScriptEntity> getListOfSqlScript() {
        return this.listOfSqlScript;
    }

    public void setListOfRestCall( List<RestCallEntity> listOfRestCall ) {
        this.listOfRestCall = listOfRestCall;
    }
    public List<RestCallEntity> getListOfRestCall() {
        return this.listOfRestCall;
    }

    public void setListOfBatchJob( List<BatchJobEntity> listOfBatchJob ) {
        this.listOfBatchJob = listOfBatchJob;
    }
    public List<BatchJobEntity> getListOfBatchJob() {
        return this.listOfBatchJob;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(ticketNumber);
        sb.append("|");
        sb.append(datePlaced);
        // attribute 'comment' not usable (type = String Long Text)
        sb.append("|");
        sb.append(dateModified);
        return sb.toString(); 
    } 

}
