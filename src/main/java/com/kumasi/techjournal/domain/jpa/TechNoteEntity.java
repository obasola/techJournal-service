/*
 * Created on 4 Jul 2016 ( Time 10:14:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.kumasi.techjournal.domain.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "tech_note"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="tech_note", catalog="techJournal" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="TechNoteEntity.countAll", query="SELECT COUNT(x) FROM TechNoteEntity x" )
} )
public class TechNoteEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="title", length=200)
    private String     title        ;

    @Column(name="sprint", length=45)
    private String     sprint       ;

    @Column(name="comment")
    private String     comment      ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date_placed")
    private Date       datePlaced   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date_modified")
    private Date       dateModified ;

	// "applicationId" (column "application_id") is not defined by itself because used as FK in a link 
	// "sprintId" (column "Sprint_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="techNote", targetEntity=SourceCodeEntity.class)
    private List<SourceCodeEntity> listOfSourceCode;

    @ManyToOne
    @JoinColumn(name="Sprint_id", referencedColumnName="id")
    private SprintEntity sprint2     ;

    @OneToMany(mappedBy="techNote", targetEntity=ReleaseNoteEntity.class)
    private List<ReleaseNoteEntity> listOfReleaseNote;

    @ManyToOne
    @JoinColumn(name="application_id", referencedColumnName="id")
    private ApplicationEntity application ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public TechNoteEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : title ( VARCHAR ) 
    public void setTitle( String title ) {
        this.title = title;
    }
    public String getTitle() {
        return this.title;
    }

    //--- DATABASE MAPPING : sprint ( VARCHAR ) 
    public void setSprint( String sprint ) {
        this.sprint = sprint;
    }
    public String getSprint() {
        return this.sprint;
    }

    //--- DATABASE MAPPING : comment ( MEDIUMTEXT ) 
    public void setComment( String comment ) {
        this.comment = comment;
    }
    public String getComment() {
        return this.comment;
    }

    //--- DATABASE MAPPING : date_placed ( DATETIME ) 
    public void setDatePlaced( Date datePlaced ) {
        this.datePlaced = datePlaced;
    }
    public Date getDatePlaced() {
        return this.datePlaced;
    }

    //--- DATABASE MAPPING : date_modified ( DATETIME ) 
    public void setDateModified( Date dateModified ) {
        this.dateModified = dateModified;
    }
    public Date getDateModified() {
        return this.dateModified;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfSourceCode( List<SourceCodeEntity> listOfSourceCode ) {
        this.listOfSourceCode = listOfSourceCode;
    }
    public List<SourceCodeEntity> getListOfSourceCode() {
        return this.listOfSourceCode;
    }

    public void setSprint2( SprintEntity sprint2 ) {
        this.sprint2 = sprint2;
    }
    public SprintEntity getSprint2() {
        return this.sprint2;
    }

    public void setListOfReleaseNote( List<ReleaseNoteEntity> listOfReleaseNote ) {
        this.listOfReleaseNote = listOfReleaseNote;
    }
    public List<ReleaseNoteEntity> getListOfReleaseNote() {
        return this.listOfReleaseNote;
    }

    public void setApplication( ApplicationEntity application ) {
        this.application = application;
    }
    public ApplicationEntity getApplication() {
        return this.application;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(title);
        sb.append("|");
        sb.append(sprint);
        // attribute 'comment' not usable (type = String Long Text)
        sb.append("|");
        sb.append(datePlaced);
        sb.append("|");
        sb.append(dateModified);
        return sb.toString(); 
    } 

}
