/*
 * Created on 1 Jul 2016 ( Time 19:35:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.kumasi.techjournal.domain.SqlScript;
import com.kumasi.techjournal.business.service.SqlScriptService;
import com.kumasi.techjournal.web.listitem.SqlScriptListItem;

/**
 * Spring MVC controller for 'SqlScript' management.
 */
@Controller
public class SqlScriptRestController {

	@Resource
	private SqlScriptService sqlScriptService;
	
	@RequestMapping( value="/items/sqlScript",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<SqlScriptListItem> findAllAsListItems() {
		List<SqlScript> list = sqlScriptService.findAll();
		List<SqlScriptListItem> items = new LinkedList<SqlScriptListItem>();
		for ( SqlScript sqlScript : list ) {
			items.add(new SqlScriptListItem( sqlScript ) );
		}
		return items;
	}
	
	@RequestMapping( value="/sqlScript",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<SqlScript> findAll() {
		return sqlScriptService.findAll();
	}

	@RequestMapping( value="/sqlScript/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public SqlScript findOne(@PathVariable("id") Integer id) {
		return sqlScriptService.findById(id);
	}
	
	@RequestMapping( value="/sqlScript",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public SqlScript create(@RequestBody SqlScript sqlScript) {
		return sqlScriptService.create(sqlScript);
	}

	@RequestMapping( value="/sqlScript/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public SqlScript update(@PathVariable("id") Integer id, @RequestBody SqlScript sqlScript) {
		return sqlScriptService.update(sqlScript);
	}

	@RequestMapping( value="/sqlScript/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		sqlScriptService.delete(id);
	}
	
}
