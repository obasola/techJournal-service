/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.techjournal.domain.BatchJob;
import com.kumasi.techjournal.domain.jpa.BatchJobEntity;
import java.util.Date;
import com.kumasi.techjournal.business.service.mapping.BatchJobServiceMapper;
import com.kumasi.techjournal.persistence.services.jpa.BatchJobPersistenceJPA;
import com.kumasi.techjournal.test.BatchJobFactoryForTest;
import com.kumasi.techjournal.test.BatchJobEntityFactoryForTest;
import com.kumasi.techjournal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BatchJobService
 */
@RunWith(MockitoJUnitRunner.class)
public class BatchJobServiceImplTest {

	@InjectMocks
	private BatchJobServiceImpl batchJobService;
	@Mock
	private BatchJobPersistenceJPA batchJobPersistenceJPA;
	@Mock
	private BatchJobServiceMapper batchJobServiceMapper;
	
	private BatchJobFactoryForTest batchJobFactoryForTest = new BatchJobFactoryForTest();

	private BatchJobEntityFactoryForTest batchJobEntityFactoryForTest = new BatchJobEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		BatchJobEntity batchJobEntity = batchJobPersistenceJPA.load(id);
		
		BatchJob batchJob = batchJobFactoryForTest.newBatchJob();
		when(batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntity)).thenReturn(batchJob);

		// When
		BatchJob batchJobFound = batchJobService.findById(id);

		// Then
		assertEquals(batchJob.getId(),batchJobFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<BatchJobEntity> batchJobEntitys = new ArrayList<BatchJobEntity>();
		BatchJobEntity batchJobEntity1 = batchJobEntityFactoryForTest.newBatchJobEntity();
		batchJobEntitys.add(batchJobEntity1);
		BatchJobEntity batchJobEntity2 = batchJobEntityFactoryForTest.newBatchJobEntity();
		batchJobEntitys.add(batchJobEntity2);
		when(batchJobPersistenceJPA.loadAll()).thenReturn(batchJobEntitys);
		
		BatchJob batchJob1 = batchJobFactoryForTest.newBatchJob();
		when(batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntity1)).thenReturn(batchJob1);
		BatchJob batchJob2 = batchJobFactoryForTest.newBatchJob();
		when(batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntity2)).thenReturn(batchJob2);

		// When
		List<BatchJob> batchJobsFounds = batchJobService.findAll();

		// Then
		assertTrue(batchJob1 == batchJobsFounds.get(0));
		assertTrue(batchJob2 == batchJobsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BatchJob batchJob = batchJobFactoryForTest.newBatchJob();

		BatchJobEntity batchJobEntity = batchJobEntityFactoryForTest.newBatchJobEntity();
		when(batchJobPersistenceJPA.load(batchJob.getId())).thenReturn(null);
		
		batchJobEntity = new BatchJobEntity();
		batchJobServiceMapper.mapBatchJobToBatchJobEntity(batchJob, batchJobEntity);
		BatchJobEntity batchJobEntitySaved = batchJobPersistenceJPA.save(batchJobEntity);
		
		BatchJob batchJobSaved = batchJobFactoryForTest.newBatchJob();
		when(batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntitySaved)).thenReturn(batchJobSaved);

		// When
		BatchJob batchJobResult = batchJobService.create(batchJob);

		// Then
		assertTrue(batchJobResult == batchJobSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BatchJob batchJob = batchJobFactoryForTest.newBatchJob();

		BatchJobEntity batchJobEntity = batchJobEntityFactoryForTest.newBatchJobEntity();
		when(batchJobPersistenceJPA.load(batchJob.getId())).thenReturn(batchJobEntity);

		// When
		Exception exception = null;
		try {
			batchJobService.create(batchJob);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BatchJob batchJob = batchJobFactoryForTest.newBatchJob();

		BatchJobEntity batchJobEntity = batchJobEntityFactoryForTest.newBatchJobEntity();
		when(batchJobPersistenceJPA.load(batchJob.getId())).thenReturn(batchJobEntity);
		
		BatchJobEntity batchJobEntitySaved = batchJobEntityFactoryForTest.newBatchJobEntity();
		when(batchJobPersistenceJPA.save(batchJobEntity)).thenReturn(batchJobEntitySaved);
		
		BatchJob batchJobSaved = batchJobFactoryForTest.newBatchJob();
		when(batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntitySaved)).thenReturn(batchJobSaved);

		// When
		BatchJob batchJobResult = batchJobService.update(batchJob);

		// Then
		verify(batchJobServiceMapper).mapBatchJobToBatchJobEntity(batchJob, batchJobEntity);
		assertTrue(batchJobResult == batchJobSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		batchJobService.delete(id);

		// Then
		verify(batchJobPersistenceJPA).delete(id);
		
	}

}
