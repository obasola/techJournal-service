/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.techjournal.domain.SqlScript;
import com.kumasi.techjournal.domain.jpa.SqlScriptEntity;
import com.kumasi.techjournal.domain.jpa.ReleaseNoteEntity;
import com.kumasi.techjournal.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class SqlScriptServiceMapperTest {

	private SqlScriptServiceMapper sqlScriptServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		sqlScriptServiceMapper = new SqlScriptServiceMapper();
		sqlScriptServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'SqlScriptEntity' to 'SqlScript'
	 * @param sqlScriptEntity
	 */
	@Test
	public void testMapSqlScriptEntityToSqlScript() {
		// Given
		SqlScriptEntity sqlScriptEntity = new SqlScriptEntity();
		sqlScriptEntity.setDatabaseName(mockValues.nextString(45));
		sqlScriptEntity.setScript(mockValues.nextString(16777215));
		sqlScriptEntity.setComment(mockValues.nextString(16777215));
		sqlScriptEntity.setDatePlaced(mockValues.nextDate());
		sqlScriptEntity.setDateModified(mockValues.nextDate());
		sqlScriptEntity.setReleaseNote(new ReleaseNoteEntity());
		sqlScriptEntity.getReleaseNote().setId(mockValues.nextInteger());
		
		// When
		SqlScript sqlScript = sqlScriptServiceMapper.mapSqlScriptEntityToSqlScript(sqlScriptEntity);
		
		// Then
		assertEquals(sqlScriptEntity.getDatabaseName(), sqlScript.getDatabaseName());
		assertEquals(sqlScriptEntity.getScript(), sqlScript.getScript());
		assertEquals(sqlScriptEntity.getComment(), sqlScript.getComment());
		assertEquals(sqlScriptEntity.getDatePlaced(), sqlScript.getDatePlaced());
		assertEquals(sqlScriptEntity.getDateModified(), sqlScript.getDateModified());
		assertEquals(sqlScriptEntity.getReleaseNote().getId(), sqlScript.getReleaseNoteId());
	}
	
	/**
	 * Test : Mapping from 'SqlScript' to 'SqlScriptEntity'
	 */
	@Test
	public void testMapSqlScriptToSqlScriptEntity() {
		// Given
		SqlScript sqlScript = new SqlScript();
		sqlScript.setDatabaseName(mockValues.nextString(45));
		sqlScript.setScript(mockValues.nextString(16777215));
		sqlScript.setComment(mockValues.nextString(16777215));
		sqlScript.setDatePlaced(mockValues.nextDate());
		sqlScript.setDateModified(mockValues.nextDate());
		sqlScript.setReleaseNoteId(mockValues.nextInteger());

		SqlScriptEntity sqlScriptEntity = new SqlScriptEntity();
		
		// When
		sqlScriptServiceMapper.mapSqlScriptToSqlScriptEntity(sqlScript, sqlScriptEntity);
		
		// Then
		assertEquals(sqlScript.getDatabaseName(), sqlScriptEntity.getDatabaseName());
		assertEquals(sqlScript.getScript(), sqlScriptEntity.getScript());
		assertEquals(sqlScript.getComment(), sqlScriptEntity.getComment());
		assertEquals(sqlScript.getDatePlaced(), sqlScriptEntity.getDatePlaced());
		assertEquals(sqlScript.getDateModified(), sqlScriptEntity.getDateModified());
		assertEquals(sqlScript.getReleaseNoteId(), sqlScriptEntity.getReleaseNote().getId());
	}

}