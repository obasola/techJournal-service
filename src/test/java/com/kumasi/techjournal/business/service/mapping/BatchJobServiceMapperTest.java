/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.techjournal.domain.BatchJob;
import com.kumasi.techjournal.domain.jpa.BatchJobEntity;
import com.kumasi.techjournal.domain.jpa.ReleaseNoteEntity;
import com.kumasi.techjournal.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class BatchJobServiceMapperTest {

	private BatchJobServiceMapper batchJobServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		batchJobServiceMapper = new BatchJobServiceMapper();
		batchJobServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'BatchJobEntity' to 'BatchJob'
	 * @param batchJobEntity
	 */
	@Test
	public void testMapBatchJobEntityToBatchJob() {
		// Given
		BatchJobEntity batchJobEntity = new BatchJobEntity();
		batchJobEntity.setJobName(mockValues.nextString(45));
		batchJobEntity.setFileName(mockValues.nextString(65));
		batchJobEntity.setData(mockValues.nextString(16777215));
		batchJobEntity.setDatePlaced(mockValues.nextDate());
		batchJobEntity.setDateModified(mockValues.nextDate());
		batchJobEntity.setReleaseNote(new ReleaseNoteEntity());
		batchJobEntity.getReleaseNote().setId(mockValues.nextInteger());
		
		// When
		BatchJob batchJob = batchJobServiceMapper.mapBatchJobEntityToBatchJob(batchJobEntity);
		
		// Then
		assertEquals(batchJobEntity.getJobName(), batchJob.getJobName());
		assertEquals(batchJobEntity.getFileName(), batchJob.getFileName());
		assertEquals(batchJobEntity.getData(), batchJob.getData());
		assertEquals(batchJobEntity.getDatePlaced(), batchJob.getDatePlaced());
		assertEquals(batchJobEntity.getDateModified(), batchJob.getDateModified());
		assertEquals(batchJobEntity.getReleaseNote().getId(), batchJob.getReleaseNoteId());
	}
	
	/**
	 * Test : Mapping from 'BatchJob' to 'BatchJobEntity'
	 */
	@Test
	public void testMapBatchJobToBatchJobEntity() {
		// Given
		BatchJob batchJob = new BatchJob();
		batchJob.setJobName(mockValues.nextString(45));
		batchJob.setFileName(mockValues.nextString(65));
		batchJob.setData(mockValues.nextString(16777215));
		batchJob.setDatePlaced(mockValues.nextDate());
		batchJob.setDateModified(mockValues.nextDate());
		batchJob.setReleaseNoteId(mockValues.nextInteger());

		BatchJobEntity batchJobEntity = new BatchJobEntity();
		
		// When
		batchJobServiceMapper.mapBatchJobToBatchJobEntity(batchJob, batchJobEntity);
		
		// Then
		assertEquals(batchJob.getJobName(), batchJobEntity.getJobName());
		assertEquals(batchJob.getFileName(), batchJobEntity.getFileName());
		assertEquals(batchJob.getData(), batchJobEntity.getData());
		assertEquals(batchJob.getDatePlaced(), batchJobEntity.getDatePlaced());
		assertEquals(batchJob.getDateModified(), batchJobEntity.getDateModified());
		assertEquals(batchJob.getReleaseNoteId(), batchJobEntity.getReleaseNote().getId());
	}

}