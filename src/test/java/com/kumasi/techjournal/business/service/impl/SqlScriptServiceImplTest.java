/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.techjournal.domain.SqlScript;
import com.kumasi.techjournal.domain.jpa.SqlScriptEntity;
import java.util.Date;
import com.kumasi.techjournal.business.service.mapping.SqlScriptServiceMapper;
import com.kumasi.techjournal.persistence.services.jpa.SqlScriptPersistenceJPA;
import com.kumasi.techjournal.test.SqlScriptFactoryForTest;
import com.kumasi.techjournal.test.SqlScriptEntityFactoryForTest;
import com.kumasi.techjournal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SqlScriptService
 */
@RunWith(MockitoJUnitRunner.class)
public class SqlScriptServiceImplTest {

	@InjectMocks
	private SqlScriptServiceImpl sqlScriptService;
	@Mock
	private SqlScriptPersistenceJPA sqlScriptPersistenceJPA;
	@Mock
	private SqlScriptServiceMapper sqlScriptServiceMapper;
	
	private SqlScriptFactoryForTest sqlScriptFactoryForTest = new SqlScriptFactoryForTest();

	private SqlScriptEntityFactoryForTest sqlScriptEntityFactoryForTest = new SqlScriptEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SqlScriptEntity sqlScriptEntity = sqlScriptPersistenceJPA.load(id);
		
		SqlScript sqlScript = sqlScriptFactoryForTest.newSqlScript();
		when(sqlScriptServiceMapper.mapSqlScriptEntityToSqlScript(sqlScriptEntity)).thenReturn(sqlScript);

		// When
		SqlScript sqlScriptFound = sqlScriptService.findById(id);

		// Then
		assertEquals(sqlScript.getId(),sqlScriptFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SqlScriptEntity> sqlScriptEntitys = new ArrayList<SqlScriptEntity>();
		SqlScriptEntity sqlScriptEntity1 = sqlScriptEntityFactoryForTest.newSqlScriptEntity();
		sqlScriptEntitys.add(sqlScriptEntity1);
		SqlScriptEntity sqlScriptEntity2 = sqlScriptEntityFactoryForTest.newSqlScriptEntity();
		sqlScriptEntitys.add(sqlScriptEntity2);
		when(sqlScriptPersistenceJPA.loadAll()).thenReturn(sqlScriptEntitys);
		
		SqlScript sqlScript1 = sqlScriptFactoryForTest.newSqlScript();
		when(sqlScriptServiceMapper.mapSqlScriptEntityToSqlScript(sqlScriptEntity1)).thenReturn(sqlScript1);
		SqlScript sqlScript2 = sqlScriptFactoryForTest.newSqlScript();
		when(sqlScriptServiceMapper.mapSqlScriptEntityToSqlScript(sqlScriptEntity2)).thenReturn(sqlScript2);

		// When
		List<SqlScript> sqlScriptsFounds = sqlScriptService.findAll();

		// Then
		assertTrue(sqlScript1 == sqlScriptsFounds.get(0));
		assertTrue(sqlScript2 == sqlScriptsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SqlScript sqlScript = sqlScriptFactoryForTest.newSqlScript();

		SqlScriptEntity sqlScriptEntity = sqlScriptEntityFactoryForTest.newSqlScriptEntity();
		when(sqlScriptPersistenceJPA.load(sqlScript.getId())).thenReturn(null);
		
		sqlScriptEntity = new SqlScriptEntity();
		sqlScriptServiceMapper.mapSqlScriptToSqlScriptEntity(sqlScript, sqlScriptEntity);
		SqlScriptEntity sqlScriptEntitySaved = sqlScriptPersistenceJPA.save(sqlScriptEntity);
		
		SqlScript sqlScriptSaved = sqlScriptFactoryForTest.newSqlScript();
		when(sqlScriptServiceMapper.mapSqlScriptEntityToSqlScript(sqlScriptEntitySaved)).thenReturn(sqlScriptSaved);

		// When
		SqlScript sqlScriptResult = sqlScriptService.create(sqlScript);

		// Then
		assertTrue(sqlScriptResult == sqlScriptSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SqlScript sqlScript = sqlScriptFactoryForTest.newSqlScript();

		SqlScriptEntity sqlScriptEntity = sqlScriptEntityFactoryForTest.newSqlScriptEntity();
		when(sqlScriptPersistenceJPA.load(sqlScript.getId())).thenReturn(sqlScriptEntity);

		// When
		Exception exception = null;
		try {
			sqlScriptService.create(sqlScript);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SqlScript sqlScript = sqlScriptFactoryForTest.newSqlScript();

		SqlScriptEntity sqlScriptEntity = sqlScriptEntityFactoryForTest.newSqlScriptEntity();
		when(sqlScriptPersistenceJPA.load(sqlScript.getId())).thenReturn(sqlScriptEntity);
		
		SqlScriptEntity sqlScriptEntitySaved = sqlScriptEntityFactoryForTest.newSqlScriptEntity();
		when(sqlScriptPersistenceJPA.save(sqlScriptEntity)).thenReturn(sqlScriptEntitySaved);
		
		SqlScript sqlScriptSaved = sqlScriptFactoryForTest.newSqlScript();
		when(sqlScriptServiceMapper.mapSqlScriptEntityToSqlScript(sqlScriptEntitySaved)).thenReturn(sqlScriptSaved);

		// When
		SqlScript sqlScriptResult = sqlScriptService.update(sqlScript);

		// Then
		verify(sqlScriptServiceMapper).mapSqlScriptToSqlScriptEntity(sqlScript, sqlScriptEntity);
		assertTrue(sqlScriptResult == sqlScriptSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		sqlScriptService.delete(id);

		// Then
		verify(sqlScriptPersistenceJPA).delete(id);
		
	}

}
