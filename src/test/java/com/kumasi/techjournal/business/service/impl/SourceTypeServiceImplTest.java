/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.techjournal.domain.SourceType;
import com.kumasi.techjournal.domain.jpa.SourceTypeEntity;
import java.util.List;
import com.kumasi.techjournal.business.service.mapping.SourceTypeServiceMapper;
import com.kumasi.techjournal.persistence.services.jpa.SourceTypePersistenceJPA;
import com.kumasi.techjournal.test.SourceTypeFactoryForTest;
import com.kumasi.techjournal.test.SourceTypeEntityFactoryForTest;
import com.kumasi.techjournal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SourceTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class SourceTypeServiceImplTest {

	@InjectMocks
	private SourceTypeServiceImpl sourceTypeService;
	@Mock
	private SourceTypePersistenceJPA sourceTypePersistenceJPA;
	@Mock
	private SourceTypeServiceMapper sourceTypeServiceMapper;
	
	private SourceTypeFactoryForTest sourceTypeFactoryForTest = new SourceTypeFactoryForTest();

	private SourceTypeEntityFactoryForTest sourceTypeEntityFactoryForTest = new SourceTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SourceTypeEntity sourceTypeEntity = sourceTypePersistenceJPA.load(id);
		
		SourceType sourceType = sourceTypeFactoryForTest.newSourceType();
		when(sourceTypeServiceMapper.mapSourceTypeEntityToSourceType(sourceTypeEntity)).thenReturn(sourceType);

		// When
		SourceType sourceTypeFound = sourceTypeService.findById(id);

		// Then
		assertEquals(sourceType.getId(),sourceTypeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SourceTypeEntity> sourceTypeEntitys = new ArrayList<SourceTypeEntity>();
		SourceTypeEntity sourceTypeEntity1 = sourceTypeEntityFactoryForTest.newSourceTypeEntity();
		sourceTypeEntitys.add(sourceTypeEntity1);
		SourceTypeEntity sourceTypeEntity2 = sourceTypeEntityFactoryForTest.newSourceTypeEntity();
		sourceTypeEntitys.add(sourceTypeEntity2);
		when(sourceTypePersistenceJPA.loadAll()).thenReturn(sourceTypeEntitys);
		
		SourceType sourceType1 = sourceTypeFactoryForTest.newSourceType();
		when(sourceTypeServiceMapper.mapSourceTypeEntityToSourceType(sourceTypeEntity1)).thenReturn(sourceType1);
		SourceType sourceType2 = sourceTypeFactoryForTest.newSourceType();
		when(sourceTypeServiceMapper.mapSourceTypeEntityToSourceType(sourceTypeEntity2)).thenReturn(sourceType2);

		// When
		List<SourceType> sourceTypesFounds = sourceTypeService.findAll();

		// Then
		assertTrue(sourceType1 == sourceTypesFounds.get(0));
		assertTrue(sourceType2 == sourceTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SourceType sourceType = sourceTypeFactoryForTest.newSourceType();

		SourceTypeEntity sourceTypeEntity = sourceTypeEntityFactoryForTest.newSourceTypeEntity();
		when(sourceTypePersistenceJPA.load(sourceType.getId())).thenReturn(null);
		
		sourceTypeEntity = new SourceTypeEntity();
		sourceTypeServiceMapper.mapSourceTypeToSourceTypeEntity(sourceType, sourceTypeEntity);
		SourceTypeEntity sourceTypeEntitySaved = sourceTypePersistenceJPA.save(sourceTypeEntity);
		
		SourceType sourceTypeSaved = sourceTypeFactoryForTest.newSourceType();
		when(sourceTypeServiceMapper.mapSourceTypeEntityToSourceType(sourceTypeEntitySaved)).thenReturn(sourceTypeSaved);

		// When
		SourceType sourceTypeResult = sourceTypeService.create(sourceType);

		// Then
		assertTrue(sourceTypeResult == sourceTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SourceType sourceType = sourceTypeFactoryForTest.newSourceType();

		SourceTypeEntity sourceTypeEntity = sourceTypeEntityFactoryForTest.newSourceTypeEntity();
		when(sourceTypePersistenceJPA.load(sourceType.getId())).thenReturn(sourceTypeEntity);

		// When
		Exception exception = null;
		try {
			sourceTypeService.create(sourceType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SourceType sourceType = sourceTypeFactoryForTest.newSourceType();

		SourceTypeEntity sourceTypeEntity = sourceTypeEntityFactoryForTest.newSourceTypeEntity();
		when(sourceTypePersistenceJPA.load(sourceType.getId())).thenReturn(sourceTypeEntity);
		
		SourceTypeEntity sourceTypeEntitySaved = sourceTypeEntityFactoryForTest.newSourceTypeEntity();
		when(sourceTypePersistenceJPA.save(sourceTypeEntity)).thenReturn(sourceTypeEntitySaved);
		
		SourceType sourceTypeSaved = sourceTypeFactoryForTest.newSourceType();
		when(sourceTypeServiceMapper.mapSourceTypeEntityToSourceType(sourceTypeEntitySaved)).thenReturn(sourceTypeSaved);

		// When
		SourceType sourceTypeResult = sourceTypeService.update(sourceType);

		// Then
		verify(sourceTypeServiceMapper).mapSourceTypeToSourceTypeEntity(sourceType, sourceTypeEntity);
		assertTrue(sourceTypeResult == sourceTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		sourceTypeService.delete(id);

		// Then
		verify(sourceTypePersistenceJPA).delete(id);
		
	}

}
