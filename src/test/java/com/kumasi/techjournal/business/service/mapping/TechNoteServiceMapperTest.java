/*
 * Created on 2 Jul 2016 ( Time 10:09:19 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.techjournal.domain.TechNote;
import com.kumasi.techjournal.domain.jpa.TechNoteEntity;
import com.kumasi.techjournal.domain.jpa.ApplicationEntity;
import com.kumasi.techjournal.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TechNoteServiceMapperTest {

	private TechNoteServiceMapper techNoteServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		techNoteServiceMapper = new TechNoteServiceMapper();
		techNoteServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TechNoteEntity' to 'TechNote'
	 * @param techNoteEntity
	 */
	@Test
	public void testMapTechNoteEntityToTechNote() {
		// Given
		TechNoteEntity techNoteEntity = new TechNoteEntity();
		techNoteEntity.setTitle(mockValues.nextString(200));
		techNoteEntity.setSprint(mockValues.nextString(45));
		techNoteEntity.setComment(mockValues.nextString(16777215));
		techNoteEntity.setDatePlaced(mockValues.nextDate());
		techNoteEntity.setDateModified(mockValues.nextDate());
		techNoteEntity.setApplication(new ApplicationEntity());
		techNoteEntity.getApplication().setId(mockValues.nextInteger());
		
		// When
		TechNote techNote = techNoteServiceMapper.mapTechNoteEntityToTechNote(techNoteEntity);
		
		// Then
		assertEquals(techNoteEntity.getTitle(), techNote.getTitle());
		assertEquals(techNoteEntity.getSprint(), techNote.getSprint());
		assertEquals(techNoteEntity.getComment(), techNote.getComment());
		assertEquals(techNoteEntity.getDatePlaced(), techNote.getDatePlaced());
		assertEquals(techNoteEntity.getDateModified(), techNote.getDateModified());
		assertEquals(techNoteEntity.getApplication().getId(), techNote.getApplicationId());
	}
	
	/**
	 * Test : Mapping from 'TechNote' to 'TechNoteEntity'
	 */
	@Test
	public void testMapTechNoteToTechNoteEntity() {
		// Given
		TechNote techNote = new TechNote();
		techNote.setTitle(mockValues.nextString(200));
		techNote.setSprint(mockValues.nextString(45));
		techNote.setComment(mockValues.nextString(16777215));
		techNote.setDatePlaced(mockValues.nextDate());
		techNote.setDateModified(mockValues.nextDate());
		techNote.setApplicationId(mockValues.nextInteger());

		TechNoteEntity techNoteEntity = new TechNoteEntity();
		
		// When
		techNoteServiceMapper.mapTechNoteToTechNoteEntity(techNote, techNoteEntity);
		
		// Then
		assertEquals(techNote.getTitle(), techNoteEntity.getTitle());
		assertEquals(techNote.getSprint(), techNoteEntity.getSprint());
		assertEquals(techNote.getComment(), techNoteEntity.getComment());
		assertEquals(techNote.getDatePlaced(), techNoteEntity.getDatePlaced());
		assertEquals(techNote.getDateModified(), techNoteEntity.getDateModified());
		assertEquals(techNote.getApplicationId(), techNoteEntity.getApplication().getId());
	}

}