/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.techjournal.domain.Application;
import com.kumasi.techjournal.domain.jpa.ApplicationEntity;
import java.util.List;
import com.kumasi.techjournal.business.service.mapping.ApplicationServiceMapper;
import com.kumasi.techjournal.persistence.services.jpa.ApplicationPersistenceJPA;
import com.kumasi.techjournal.test.ApplicationFactoryForTest;
import com.kumasi.techjournal.test.ApplicationEntityFactoryForTest;
import com.kumasi.techjournal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ApplicationService
 */
@RunWith(MockitoJUnitRunner.class)
public class ApplicationServiceImplTest {

	@InjectMocks
	private ApplicationServiceImpl applicationService;
	@Mock
	private ApplicationPersistenceJPA applicationPersistenceJPA;
	@Mock
	private ApplicationServiceMapper applicationServiceMapper;
	
	private ApplicationFactoryForTest applicationFactoryForTest = new ApplicationFactoryForTest();

	private ApplicationEntityFactoryForTest applicationEntityFactoryForTest = new ApplicationEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ApplicationEntity applicationEntity = applicationPersistenceJPA.load(id);
		
		Application application = applicationFactoryForTest.newApplication();
		when(applicationServiceMapper.mapApplicationEntityToApplication(applicationEntity)).thenReturn(application);

		// When
		Application applicationFound = applicationService.findById(id);

		// Then
		assertEquals(application.getId(),applicationFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ApplicationEntity> applicationEntitys = new ArrayList<ApplicationEntity>();
		ApplicationEntity applicationEntity1 = applicationEntityFactoryForTest.newApplicationEntity();
		applicationEntitys.add(applicationEntity1);
		ApplicationEntity applicationEntity2 = applicationEntityFactoryForTest.newApplicationEntity();
		applicationEntitys.add(applicationEntity2);
		when(applicationPersistenceJPA.loadAll()).thenReturn(applicationEntitys);
		
		Application application1 = applicationFactoryForTest.newApplication();
		when(applicationServiceMapper.mapApplicationEntityToApplication(applicationEntity1)).thenReturn(application1);
		Application application2 = applicationFactoryForTest.newApplication();
		when(applicationServiceMapper.mapApplicationEntityToApplication(applicationEntity2)).thenReturn(application2);

		// When
		List<Application> applicationsFounds = applicationService.findAll();

		// Then
		assertTrue(application1 == applicationsFounds.get(0));
		assertTrue(application2 == applicationsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Application application = applicationFactoryForTest.newApplication();

		ApplicationEntity applicationEntity = applicationEntityFactoryForTest.newApplicationEntity();
		when(applicationPersistenceJPA.load(application.getId())).thenReturn(null);
		
		applicationEntity = new ApplicationEntity();
		applicationServiceMapper.mapApplicationToApplicationEntity(application, applicationEntity);
		ApplicationEntity applicationEntitySaved = applicationPersistenceJPA.save(applicationEntity);
		
		Application applicationSaved = applicationFactoryForTest.newApplication();
		when(applicationServiceMapper.mapApplicationEntityToApplication(applicationEntitySaved)).thenReturn(applicationSaved);

		// When
		Application applicationResult = applicationService.create(application);

		// Then
		assertTrue(applicationResult == applicationSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Application application = applicationFactoryForTest.newApplication();

		ApplicationEntity applicationEntity = applicationEntityFactoryForTest.newApplicationEntity();
		when(applicationPersistenceJPA.load(application.getId())).thenReturn(applicationEntity);

		// When
		Exception exception = null;
		try {
			applicationService.create(application);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Application application = applicationFactoryForTest.newApplication();

		ApplicationEntity applicationEntity = applicationEntityFactoryForTest.newApplicationEntity();
		when(applicationPersistenceJPA.load(application.getId())).thenReturn(applicationEntity);
		
		ApplicationEntity applicationEntitySaved = applicationEntityFactoryForTest.newApplicationEntity();
		when(applicationPersistenceJPA.save(applicationEntity)).thenReturn(applicationEntitySaved);
		
		Application applicationSaved = applicationFactoryForTest.newApplication();
		when(applicationServiceMapper.mapApplicationEntityToApplication(applicationEntitySaved)).thenReturn(applicationSaved);

		// When
		Application applicationResult = applicationService.update(application);

		// Then
		verify(applicationServiceMapper).mapApplicationToApplicationEntity(application, applicationEntity);
		assertTrue(applicationResult == applicationSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		applicationService.delete(id);

		// Then
		verify(applicationPersistenceJPA).delete(id);
		
	}

}
