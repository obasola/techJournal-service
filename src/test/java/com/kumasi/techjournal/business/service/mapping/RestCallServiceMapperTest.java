/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.techjournal.domain.RestCall;
import com.kumasi.techjournal.domain.jpa.RestCallEntity;
import com.kumasi.techjournal.domain.jpa.ReleaseNoteEntity;
import com.kumasi.techjournal.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class RestCallServiceMapperTest {

	private RestCallServiceMapper restCallServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		restCallServiceMapper = new RestCallServiceMapper();
		restCallServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'RestCallEntity' to 'RestCall'
	 * @param restCallEntity
	 */
	@Test
	public void testMapRestCallEntityToRestCall() {
		// Given
		RestCallEntity restCallEntity = new RestCallEntity();
		restCallEntity.setRestUrl(mockValues.nextString(65));
		restCallEntity.setApiKey(mockValues.nextString(75));
		restCallEntity.setComment(mockValues.nextString(16777215));
		restCallEntity.setDatePlaced(mockValues.nextDate());
		restCallEntity.setDateModified(mockValues.nextDate());
		restCallEntity.setReleaseNote(new ReleaseNoteEntity());
		restCallEntity.getReleaseNote().setId(mockValues.nextInteger());
		
		// When
		RestCall restCall = restCallServiceMapper.mapRestCallEntityToRestCall(restCallEntity);
		
		// Then
		assertEquals(restCallEntity.getRestUrl(), restCall.getRestUrl());
		assertEquals(restCallEntity.getApiKey(), restCall.getApiKey());
		assertEquals(restCallEntity.getComment(), restCall.getComment());
		assertEquals(restCallEntity.getDatePlaced(), restCall.getDatePlaced());
		assertEquals(restCallEntity.getDateModified(), restCall.getDateModified());
		assertEquals(restCallEntity.getReleaseNote().getId(), restCall.getReleaseNoteId());
	}
	
	/**
	 * Test : Mapping from 'RestCall' to 'RestCallEntity'
	 */
	@Test
	public void testMapRestCallToRestCallEntity() {
		// Given
		RestCall restCall = new RestCall();
		restCall.setRestUrl(mockValues.nextString(65));
		restCall.setApiKey(mockValues.nextString(75));
		restCall.setComment(mockValues.nextString(16777215));
		restCall.setDatePlaced(mockValues.nextDate());
		restCall.setDateModified(mockValues.nextDate());
		restCall.setReleaseNoteId(mockValues.nextInteger());

		RestCallEntity restCallEntity = new RestCallEntity();
		
		// When
		restCallServiceMapper.mapRestCallToRestCallEntity(restCall, restCallEntity);
		
		// Then
		assertEquals(restCall.getRestUrl(), restCallEntity.getRestUrl());
		assertEquals(restCall.getApiKey(), restCallEntity.getApiKey());
		assertEquals(restCall.getComment(), restCallEntity.getComment());
		assertEquals(restCall.getDatePlaced(), restCallEntity.getDatePlaced());
		assertEquals(restCall.getDateModified(), restCallEntity.getDateModified());
		assertEquals(restCall.getReleaseNoteId(), restCallEntity.getReleaseNote().getId());
	}

}