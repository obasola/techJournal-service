/*
 * Created on 2 Jul 2016 ( Time 10:09:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.techjournal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.techjournal.domain.ReleaseNote;
import com.kumasi.techjournal.domain.jpa.ReleaseNoteEntity;
import java.util.Date;
import java.util.List;
import com.kumasi.techjournal.business.service.mapping.ReleaseNoteServiceMapper;
import com.kumasi.techjournal.persistence.services.jpa.ReleaseNotePersistenceJPA;
import com.kumasi.techjournal.test.ReleaseNoteFactoryForTest;
import com.kumasi.techjournal.test.ReleaseNoteEntityFactoryForTest;
import com.kumasi.techjournal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReleaseNoteService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReleaseNoteServiceImplTest {

	@InjectMocks
	private ReleaseNoteServiceImpl releaseNoteService;
	@Mock
	private ReleaseNotePersistenceJPA releaseNotePersistenceJPA;
	@Mock
	private ReleaseNoteServiceMapper releaseNoteServiceMapper;
	
	private ReleaseNoteFactoryForTest releaseNoteFactoryForTest = new ReleaseNoteFactoryForTest();

	private ReleaseNoteEntityFactoryForTest releaseNoteEntityFactoryForTest = new ReleaseNoteEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ReleaseNoteEntity releaseNoteEntity = releaseNotePersistenceJPA.load(id);
		
		ReleaseNote releaseNote = releaseNoteFactoryForTest.newReleaseNote();
		when(releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntity)).thenReturn(releaseNote);

		// When
		ReleaseNote releaseNoteFound = releaseNoteService.findById(id);

		// Then
		assertEquals(releaseNote.getId(),releaseNoteFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ReleaseNoteEntity> releaseNoteEntitys = new ArrayList<ReleaseNoteEntity>();
		ReleaseNoteEntity releaseNoteEntity1 = releaseNoteEntityFactoryForTest.newReleaseNoteEntity();
		releaseNoteEntitys.add(releaseNoteEntity1);
		ReleaseNoteEntity releaseNoteEntity2 = releaseNoteEntityFactoryForTest.newReleaseNoteEntity();
		releaseNoteEntitys.add(releaseNoteEntity2);
		when(releaseNotePersistenceJPA.loadAll()).thenReturn(releaseNoteEntitys);
		
		ReleaseNote releaseNote1 = releaseNoteFactoryForTest.newReleaseNote();
		when(releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntity1)).thenReturn(releaseNote1);
		ReleaseNote releaseNote2 = releaseNoteFactoryForTest.newReleaseNote();
		when(releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntity2)).thenReturn(releaseNote2);

		// When
		List<ReleaseNote> releaseNotesFounds = releaseNoteService.findAll();

		// Then
		assertTrue(releaseNote1 == releaseNotesFounds.get(0));
		assertTrue(releaseNote2 == releaseNotesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ReleaseNote releaseNote = releaseNoteFactoryForTest.newReleaseNote();

		ReleaseNoteEntity releaseNoteEntity = releaseNoteEntityFactoryForTest.newReleaseNoteEntity();
		when(releaseNotePersistenceJPA.load(releaseNote.getId())).thenReturn(null);
		
		releaseNoteEntity = new ReleaseNoteEntity();
		releaseNoteServiceMapper.mapReleaseNoteToReleaseNoteEntity(releaseNote, releaseNoteEntity);
		ReleaseNoteEntity releaseNoteEntitySaved = releaseNotePersistenceJPA.save(releaseNoteEntity);
		
		ReleaseNote releaseNoteSaved = releaseNoteFactoryForTest.newReleaseNote();
		when(releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntitySaved)).thenReturn(releaseNoteSaved);

		// When
		ReleaseNote releaseNoteResult = releaseNoteService.create(releaseNote);

		// Then
		assertTrue(releaseNoteResult == releaseNoteSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ReleaseNote releaseNote = releaseNoteFactoryForTest.newReleaseNote();

		ReleaseNoteEntity releaseNoteEntity = releaseNoteEntityFactoryForTest.newReleaseNoteEntity();
		when(releaseNotePersistenceJPA.load(releaseNote.getId())).thenReturn(releaseNoteEntity);

		// When
		Exception exception = null;
		try {
			releaseNoteService.create(releaseNote);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ReleaseNote releaseNote = releaseNoteFactoryForTest.newReleaseNote();

		ReleaseNoteEntity releaseNoteEntity = releaseNoteEntityFactoryForTest.newReleaseNoteEntity();
		when(releaseNotePersistenceJPA.load(releaseNote.getId())).thenReturn(releaseNoteEntity);
		
		ReleaseNoteEntity releaseNoteEntitySaved = releaseNoteEntityFactoryForTest.newReleaseNoteEntity();
		when(releaseNotePersistenceJPA.save(releaseNoteEntity)).thenReturn(releaseNoteEntitySaved);
		
		ReleaseNote releaseNoteSaved = releaseNoteFactoryForTest.newReleaseNote();
		when(releaseNoteServiceMapper.mapReleaseNoteEntityToReleaseNote(releaseNoteEntitySaved)).thenReturn(releaseNoteSaved);

		// When
		ReleaseNote releaseNoteResult = releaseNoteService.update(releaseNote);

		// Then
		verify(releaseNoteServiceMapper).mapReleaseNoteToReleaseNoteEntity(releaseNote, releaseNoteEntity);
		assertTrue(releaseNoteResult == releaseNoteSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		releaseNoteService.delete(id);

		// Then
		verify(releaseNotePersistenceJPA).delete(id);
		
	}

}
